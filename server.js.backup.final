const express = require('express');
const { Pool } = require('pg');
const session = require('express-session');
const bcrypt = require('bcryptjs');
const path = require('path');
const helmet = require('helmet');
const morgan = require('morgan');
const cors = require('cors');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3002;

// Database connection to existing PostgreSQL
const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Redis client for sessions

// Middleware
app.use(helmet());
app.use(morgan('combined'));
app.use(cors({
  origin: process.env.CORS_ORIGIN,
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static('public'));

// Session middleware
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === "production",
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000
  }
}));

// Test database connection
app.get('/health', async (req, res) => {
  try {
    const result = await pool.query('SELECT current_database(), version()');
    const dbTest = await pool.query('SELECT COUNT(*) as customer_count FROM customers');
    
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      database: {
        connected: true,
        name: result.rows[0].current_database,
        version: result.rows[0].version.split(' ')[0],
        customers: parseInt(dbTest.rows[0].customer_count)
      },
      environment: process.env.NODE_ENV,
      port: port
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      message: error.message
    });
  }
});

// Basic login route
// Clean simple login route
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  console.log(`üîê LOGIN ATTEMPT: ${username} at ${new Date().toISOString()}`);

  if (!username || !password) {
    return res.status(400).json({ error: 'Missing credentials' });
  }

  try {
    const defaultUsers = {
      'admin': '$2a$12$5eWNOEtN0131ZQiLI2etL.lhtttbQMLTi2JZIudXg4Sr./Rl48vMS',
      'PU': '$2a$12$5eWNOEtN0131ZQiLI2etL.lhtttbQMLTi2JZIudXg4Sr./Rl48vMS',
      'ST': '$2a$12$5eWNOEtN0131ZQiLI2etL.lhtttbQMLTi2JZIudXg4Sr./Rl48vMS',
      'SA': '$2a$12$5eWNOEtN0131ZQiLI2etL.lhtttbQMLTi2JZIudXg4Sr./Rl48vMS'
    };

    if (defaultUsers[username]) {
      console.log(`üë§ Checking password for: ${username}`);
      const isValid = await bcrypt.compare(password, defaultUsers[username]);
      console.log(`üîë Password result: ${isValid}`);
      
      if (isValid) {
        req.session.user = {
          username,
          role: username === 'admin' ? 'admin' : 'operation',
          canDelete: username === 'admin'
        };
        console.log(`‚úÖ Login success: ${username}`);
        return res.json({ success: true, user: req.session.user });
      }
    }

    console.log(`‚ùå Login failed: ${username}`);
    res.status(401).json({ error: 'Invalid credentials' });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Dashboard route
app.get('/dashboard', (req, res) => {
  if (!req.session.user) {
    return res.redirect('/login');
  }

  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>PK CRM Dashboard</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; max-width: 1200px; margin: 0 auto; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; border-bottom: 3px solid #3498db; padding-bottom: 20px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 25px; border-radius: 12px; text-align: center; }
        .stat-card h3 { margin: 0 0 10px 0; font-size: 2.5em; }
        .btn { padding: 10px 20px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; margin: 5px; display: inline-block; }
        .btn:hover { background: #2980b9; }
        .btn-danger { background: #e74c3c; }
        .success { color: #27ae60; font-weight: bold; margin-bottom: 20px; padding: 15px; background: #d4edda; border-radius: 5px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üéâ PK CRM Dashboard</h1>
          <div>
            <span>üë§ ${req.session.user.username} (${req.session.user.role})</span>
            <a href="/logout" class="btn btn-danger">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a>
          </div>
        </div>

        <div class="success">
          ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        </div>

        <div class="stats-grid">
          <div class="stat-card">
            <h3>5</h3>
            <p>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>
          <div class="stat-card">
            <h3>5</h3>
            <p>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</p>
          </div>
          <div class="stat-card">
            <h3>1.5M</h3>
            <p>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ Pipeline (‡∏ö‡∏≤‡∏ó)</p>
          </div>
        </div>

        <div>
          <a href="/api/customers" class="btn">üë• ‡∏î‡∏π‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (JSON)</a>
          <a href="/api/opportunities" class="btn">üíº ‡∏î‡∏π‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (JSON)</a>
          <a href="/api/pipeline-summary" class="btn">üìä ‡∏™‡∏£‡∏∏‡∏õ Pipeline (JSON)</a>
          <a href="/health" class="btn">üîß System Health</a>
        </div>

        <div style="margin-top: 30px; padding: 20px; background: #e8f5e8; border-radius: 5px;">
          <h4>üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!</h4>
          <ul>
            <li><strong>Database</strong>: PostgreSQL ‡∏û‡∏£‡πâ‡∏≠‡∏° 6 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å</li>
            <li><strong>Sample Data</strong>: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ 5 ‡∏£‡∏≤‡∏¢, ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</li>
            <li><strong>Pipeline Value</strong>: ‡∏ø1,500,000 ‡∏£‡∏ß‡∏°</li>
            <li><strong>Next Step</strong>: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Line OA + N8N</li>
          </ul>
        </div>
      </div>
    </body>
    </html>
  `);
});

// API routes for database testing
app.get('/api/customers', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM customers ORDER BY created_at DESC');
    res.json({ customers: result.rows });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/opportunities', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT o.*, c.name as customer_name 
      FROM opportunities o
      LEFT JOIN customers c ON o.customer_id = c.customer_id
      ORDER BY o.created_at DESC
    `);
    res.json({ opportunities: result.rows });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/pipeline-summary', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM sales_pipeline_summary');
    res.json({ pipeline: result.rows });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Login page
app.get('/login', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>PK CRM Login</title>
      <style>
        body { font-family: Arial; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 50px; text-align: center; min-height: 100vh; margin: 0; display: flex; align-items: center; justify-content: center; }
        .login-form { background: white; padding: 40px; border-radius: 15px; max-width: 400px; margin: 0 auto; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }
        input { padding: 12px; margin: 10px; width: 200px; border: 1px solid #ddd; border-radius: 5px; }
        button { padding: 12px 24px; background: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #2980b9; }
        .test-info { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="login-form">
        <h2>üîê PK CRM Login</h2>
        <form id="loginForm">
          <div><input type="text" id="username" name="username" placeholder="Username" required></div>
          <div><input type="password" id="password" name="password" placeholder="Password" required></div>
          <div><button type="submit">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button></div>
        </form>
        <div class="test-info">
          <h4>üß™ Test Users:</h4>
          <p><strong>admin</strong> / password123</p>
          <p><strong>PU</strong> / password123</p>
          <p><strong>ST</strong> / password123</p>
          <p><strong>SA</strong> / password123</p>
        </div>
      </div>

      <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const username = document.getElementById('username').value;
          const password = document.getElementById('password').value;
          
          try {
            const response = await fetch('/api/login', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ username, password })
            });
            
            const result = await response.json();
            
            if (result.success) {
              window.location.href = '/dashboard';
            } else {
              alert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.error);
            }
          } catch (error) {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Logout
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login');
});

// Redirect root to dashboard
app.get('/', (req, res) => {
  if (req.session && req.session.user) {
    res.redirect('/dashboard');
  } else {
    res.redirect('/login');
  }
});

// Error handler
app.use((error, req, res, next) => {
  console.error('Error:', error);
  res.status(500).json({ error: 'Internal server error' });
});

// Start server
app.listen(port, '0.0.0.0', async () => {
  try {
    // Test database connection
    const result = await pool.query('SELECT current_database(), COUNT(*) as customer_count FROM customers');
    console.log(`üöÄ PK CRM Server running on port ${port}`);
    console.log(`üìä Connected to database: ${result.rows[0].current_database}`);
    console.log(`üë• Found ${result.rows[0].customer_count} customers in database`);
    console.log(`üåê Access: https://pkcrm.pktechnic.com`);
    console.log(`üîê Login: https://pkcrm.pktechnic.com/login`);
    console.log(`üìã Dashboard: https://pkcrm.pktechnic.com/dashboard`);
    console.log(`üíö Health Check: https://pkcrm.pktechnic.com/health`);
  } catch (error) {
    console.error('‚ùå Database connection failed:', error.message);
    console.log('üìù Please check database configuration in .env file');
  }
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üõë Shutting down gracefully...');
  await pool.end();
  await redisClient.quit();
  process.exit(0);
});
